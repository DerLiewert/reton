//Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

// max-width and min-width media
@mixin media-max($screenWidth) {
  $max: $screenWidth - 0.02px;
  @media (max-width: $max) {
    @content;
  }
}

@mixin media-min($screenWidth) {
  @media (min-width: $screenWidth) {
    @content;
  }
}

@mixin media-max-height($screenHeight) {
  $max: $screenHeight - 0.02px;
  @media (max-height: $max) {
    @content;
  }
}

@mixin media-min-height($screenHeight) {
  @media (min-height: $screenWidth) {
    @content;
  }
}

@mixin media-between($screenWidthMin, $screenWidthMax) {
  $max: $screenWidthMax - 0.02;
  @media (min-width: $screenWidthMin) and (max-width: $max) {
    @content;
  }
}

@mixin media-max-width-or-height($screenWidthMax, $screenHeightMax) {
  $maxWidth: $screenWidthMax - 0.02;
  $maxHeight: $screenHeightMax - 0.02;
  @media (max-width: $maxWidth) or (max-height: $maxHeight) {
    @content;
  }
}

@mixin media-min-width-and-height($minWidth, $minHeight) {
  @media (min-width: $minWidth) and (min-height: $minHeight) {
    @content;
  }
}

//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src:
      url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

//Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
  }

  // Устанавливаем значения по умолчанию
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }
  // Адаптируем размер в промежутке между указанными ширинами вьюпорта
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div(
            $widthTo,
            16
          )}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}
